clear all
%add toolboxes
addpath(genpath('/Volumes/Zane/Matlab/eeg_toolbox/trunk'));
addpath(genpath('/Volumes/Zane/Matlab/dungeon_toolbox_17a'));
addpath(genpath('/Volumes/Zane/Matlab/Zane_Toolbox_V1/EEG_Preprocessing'));
addpath(genpath('/Volumes/Zane/Matlab/Zane_Toolbox_V1/IEM_ester'));
addpath(genpath('/Volumes/Zane/NIH_NINDS/Data_InProgress/SpecFuN'));

%% extract PAL behaviroal data
allsub=[26:64 66];
rootEEGdir = '/Volumes/Zane/NIH_FRNU_ROOT';                      %office-local

load('SubjTable_palRAMword.mat')
load('PAL_Memo_PALRAM.mat')
load('WordtoAnalyze_ATL_2ROIs.mat');

ToAnalyzeSub=allsub;
medianMemor = median(PAL_Memo.Responsememorability);
uniquewordsID_10=PAL_Memo.uniquewordsID_10;

load('WordtoAnalyzeTReduced.mat');

%%
%%- FILTERING OPTIONS
WHICH_DECOMP    = 'wavelet';  %'wavelet' 'multitaper' 'multitaper200'  % MT assumes a 500ms window, use mt200 for 200ms window; 'hilbert' not supported yet
WHICH_BANDS     = 'standard';  %WHICH_BANDS = 'standard' 'NoiseAnalysis' 'LowHigh' 'HighMidLow' 'HighMidLow2' 'JustHigh'
%- select bands for decomposition
[waveletFreqs waveletWidth waveletFreqLabels freqBandAr freqBandYticks freqBandYtickLabels hilbertFreqs multitaperObj decompStruct] = prepFreqList(WHICH_BANDS,WHICH_DECOMP);

% freqBandYticksSplit=[exp(linspace(log(2),log(16),16));exp(linspace(log(70),log(150),16))]; % only bin the data into 3 bins.

freqBandYticksSplit=[exp(linspace(log(4),log(16),10));exp(linspace(log(70),log(150),10))]; % only bin the data into 3 bins.

waveletFreqs2 = reshape(freqBandYticksSplit',1,20);
   
waveletFreqs3 = exp(linspace(log(4),log(150),25));

freqBandYticks = [ 4   8   16   32   70   150]; % overwrite the old ticks.
WordtoAnalyzeTReduced
mkdir('ATL_3Event_500')
curpath=pwd;
outpath=fullfile(curpath,'ATL_3Event_500');


% loop through subjects.
%%

for isubtem=2:length(WordtoAnalyzeTReduced.subID)
    
    
    clear SubjResults
    isub = WordtoAnalyzeTReduced.subID(isubtem);
    % duration variable across subjects
    % nanmean(SubjTable(isub).RTtemp(SubjTable(isub).RTtemp>50)) + 500 + 1000
    duration = 10000;
    offset   = -5000;
    buffer   = 500; % the butter is built-in in the duration
    resamp   = 250;
    time  =  downsample(linspace(offset,duration+offset,duration),1000/resamp);
   
    chan=WordtoAnalyzeTReduced.chan{isubtem};
    
% only analyze the middle and inferior temporal gryus. The superior sites may be influenced by sounds
    electrodeToAna=ismember(WordtoAnalyzeTReduced.chan{isubtem},WordtoAnalyzeTReduced.ATLchan{isubtem}); 
%     electrodeToAna=ismember(WordtoAnalyzeTReduced.chan{isubtem},WordtoAnalyzeTReduced.MTLchan{isubtem}); 
    chan=chan(electrodeToAna);
%%    
if length(chan)>=2 % Ony analyze the data from available channel. 
    
    temChans=[];
    allcleanTrials=[];
    
    Study_Event=WordtoAnalyzeTReduced.SubjTable{isubtem}.alignedEvents.STUDY_PAIR(WordtoAnalyzeTReduced.InDX{isubtem});
    TEST_PROBE_Event=WordtoAnalyzeTReduced.SubjTable{isubtem}.alignedEvents.TEST_PROBE(WordtoAnalyzeTReduced.InDX{isubtem});
    Recall_Event=WordtoAnalyzeTReduced.SubjTable{isubtem}.alignedEvents.RecallEvent(WordtoAnalyzeTReduced.InDX{isubtem});
 
    allssession=[TEST_PROBE_Event.session];
    uniquesessions=unique(allssession);
    
    for iss=1:length(uniquesessions)
        iss
        sessionGA_Study=gete_ms('global_avg_good',Study_Event(allssession==uniquesessions(iss)),duration,offset,buffer,[200 ],'low',2,resamp);
        sessionGA_Probe=gete_ms('global_avg_good',TEST_PROBE_Event(allssession==uniquesessions(iss)),duration,offset,buffer,[200 ],'low',2,resamp);
        sessionGA_Recall=gete_ms('global_avg_good',Recall_Event(allssession==uniquesessions(iss)),duration,offset,buffer,[200 ],'low',2,resamp);
        
        clear ProbeRawEEG ProbePowerlog WavePow_log RecallRawEEG StudyRawEEG
        parfor ic=1:length(chan)
            % get EEG
            ic
            StudyRawEEG(ic,:,:)=gete_ms(chan{ic},Study_Event(allssession==uniquesessions(iss)),duration,offset,buffer,[200 ],'low',2,resamp);
            StudyRawEEG(ic,:,:)=squeeze(StudyRawEEG(ic,:,:))-sessionGA_Study; % reference to global average of all electrode within that session.'
                        
            
            ProbeRawEEG(ic,:,:)=gete_ms(chan{ic},TEST_PROBE_Event(allssession==uniquesessions(iss)),duration,offset,buffer,[200 ],'low',2,resamp);
            ProbeRawEEG(ic,:,:)=squeeze(ProbeRawEEG(ic,:,:))-sessionGA_Probe; % reference to global average of all electrode within that session.'
            
            RecallRawEEG(ic,:,:)=gete_ms(chan{ic},Recall_Event(allssession==uniquesessions(iss)),duration,offset,buffer,[200 ],'low',2,resamp);
            RecallRawEEG(ic,:,:)=squeeze(RecallRawEEG(ic,:,:))-sessionGA_Recall; % reference to global average of all electrode within that session.'
        end
        
        StudyRawEEGAll{iss} = StudyRawEEG;
        ProbeRawEEGAll{iss} = ProbeRawEEG;
        RecallRawEEGAll{iss} = RecallRawEEG;

        clnWeights=[2.3 2.3]; % cleaning weight
        clfig=figure(2000);clf
        FIG_TITLE= ['Subj' num2str(isub) '--Session' num2str(iss) 'Study_cleaning'];
        [iChanClean1,iEvClean1,strClean] = jwCleanEEGevents_v01(StudyRawEEG,clfig,FIG_TITLE,clnWeights);
        disp(strClean);
        print(clfig,fullfile(outpath,[FIG_TITLE '.pdf']),'-dpdf','-bestfit');
        
        clfig=figure(2001);clf
        FIG_TITLE= ['Subj' num2str(isub) '--Session' num2str(iss) 'Probe_cleaning'];
        [iChanClean2,iEvClean2,strClean] = jwCleanEEGevents_v01(ProbeRawEEG,clfig,FIG_TITLE,clnWeights);
        disp(strClean);
        print(clfig,fullfile(outpath,[FIG_TITLE '.pdf']),'-dpdf','-bestfit');
        
        clfig=figure(2002);clf
        FIG_TITLE= ['Subj' num2str(isub) '--Session' num2str(iss) 'Recall_cleaning'];
        [iChanClean3,iEvClean3,strClean] = jwCleanEEGevents_v01(RecallRawEEG,clfig,FIG_TITLE,clnWeights);
        disp(strClean);
        print(clfig,fullfile(outpath,[FIG_TITLE '.pdf']),'-dpdf','-bestfit');
        
        temChans=[temChans iChanClean1 iChanClean2 iChanClean3];
        
        temTrials=1:length([TEST_PROBE_Event(allssession==uniquesessions(iss))]);
        allcleanTrials=[allcleanTrials ismember(temTrials,iEvClean1) & ismember(temTrials,iEvClean2) & ismember(temTrials,iEvClean3)];
        SessionCleanTrials{iss}=temTrials(ismember(temTrials,iEvClean1) & ismember(temTrials,iEvClean2) & ismember(temTrials,iEvClean3));
        
        clear sessionGA ProbeRawEEG
    end
    allcleanChans=unique(temChans);
    
   
    %% only did the time frequency analysis on clean trials and clean
    % electrodes
    StudyPowerlogAllSession=[]; clear StudyPowerlog
    ProbePowerlogAllSession=[]; clear ProbePowerlog
    RecallPowerlogAllSession=[]; clear RecallPowerlog
   
    % Time-frequency
    for iss=1:length(uniquesessions)
        iss
        StudyCleanEEG{iss}=StudyRawEEGAll{iss}(allcleanChans,SessionCleanTrials{iss},:); % only include clean chans in both sessions for analysis.        
        ProbeCleanEEG{iss}=ProbeRawEEGAll{iss}(allcleanChans,SessionCleanTrials{iss},:); % only include clean chans in both sessions for analysis.
        RecallCleanEEG{iss}=RecallRawEEGAll{iss}(allcleanChans,SessionCleanTrials{iss},:); % only include clean chans in both sessions for analysis
               
        clear ProbePowerlog RecallPowerlog StudyPowerlog
        parfor ic=1:size(allcleanChans,2)
            % get
            ic
            [~,WavePow_Raw] = multiphasevec3(waveletFreqs3,squeeze(StudyCleanEEG{iss}(ic,:,:)),resamp,waveletWidth);
            WavePow_log = 10*log10(WavePow_Raw);%log transformed raw power
            % zscoring normalize within each frequency band before averaging
            baseline = mean(WavePow_log(:,:,time>-1000 & time<-500),3);
            StudyPowerlog(ic,:,:,:)  = bsxfun(@rdivide,bsxfun(@minus,WavePow_log,mean(baseline)),std(baseline)); % bsxfun(@minus,WavePow_log,mean(baseline));%
            % electrodes, trial, timepoints. 
            
            [~,WavePow_Raw] = multiphasevec3(waveletFreqs3,squeeze(ProbeCleanEEG{iss}(ic,:,:)),resamp,waveletWidth);
            WavePow_log = 10*log10(WavePow_Raw);%log transformed raw power
            % zscoring normalize within each frequency band before averaging
            baseline = mean(WavePow_log(:,:,time>-1000 & time<-500),3);
            ProbePowerlog(ic,:,:,:)  = bsxfun(@rdivide,bsxfun(@minus,WavePow_log,mean(baseline)),std(baseline)); % bsxfun(@minus,WavePow_log,mean(baseline));%
            % electrodes, trial, timepoints.
            
            [~,WavePow_Raw] = multiphasevec3(waveletFreqs3,squeeze(RecallCleanEEG{iss}(ic,:,:)),resamp,waveletWidth);
            WavePow_log = 10*log10(WavePow_Raw);%log transformed raw power
            % zscoring normalize within each frequency band before averaging
            RecallPowerlog(ic,:,:,:)  = bsxfun(@rdivide,bsxfun(@minus,WavePow_log,mean(baseline)),std(baseline)); % bsxfun(@minus,WavePow_log,mean(baseline));%
            % electrodes, trial, timepoints.
        end
        StudyPowerlogAllSession=[StudyPowerlogAllSession single(StudyPowerlog)];
        ProbePowerlogAllSession=[ProbePowerlogAllSession single(ProbePowerlog)];
        RecallPowerlogAllSession=[RecallPowerlogAllSession single(RecallPowerlog)];
        
        clear ProbePowerlog RecallPowerlog StudyPowerlog
    end
    
    
    %%
%     StudyPowerlogAllSession_s = smoothdata(StudyPowerlogAllSession,4,'gaussian',250);    
%     ProbePowerlogAllSession_s = smoothdata(ProbePowerlogAllSession,4,'gaussian',250);
%     RecallPowerlogAllSession_s = smoothdata(RecallPowerlogAllSession,4,'gaussian',250);
%        
    SubjResults.allcleanChans=chan(allcleanChans);
    SubjResults.MeanRT=nanmean(SubjTable(isub).RTtemp(SubjTable(isub).RTtemp>50));
    SubjResults.MedianRT=nanmedian(SubjTable(isub).RTtemp(SubjTable(isub).RTtemp>0));
    SubjResults.allcleanTrials=allcleanTrials;  

    %% moving average approach 
    timewindowlength=0.500;overlappercept=0.80;Fs=resamp;
    
    clear StudyPowerlogAllSessionNormtime  ProbePowerlogAllSessionNormtime  RecallPowerlogAllSessionNormtime
    parfor ic=1:size(ProbePowerlogAllSession,1)
        ic
        [BinTimeCENTER, StudyPowerlogAllSessionNormtime(ic,:,:,:)]= windowed_average_with_freq(squeeze(StudyPowerlogAllSession(ic,:,:,:)),timewindowlength,overlappercept,Fs);
        [BinTimeCENTER, ProbePowerlogAllSessionNormtime(ic,:,:,:)]= windowed_average_with_freq(squeeze(ProbePowerlogAllSession(ic,:,:,:)),timewindowlength,overlappercept,Fs);
        [BinTimeCENTER, RecallPowerlogAllSessionNormtime(ic,:,:,:)]= windowed_average_with_freq(squeeze(RecallPowerlogAllSession(ic,:,:,:)),timewindowlength,overlappercept,Fs);
    end
    [BinTimeCENTER, RecallPowerlogAllSessionNormtime(1,:,:,:)]= windowed_average_with_freq(squeeze(RecallPowerlogAllSession(1,:,:,:)),timewindowlength,overlappercept,Fs);
    
    BinTimeCENTER=(BinTimeCENTER*1000)-5000;
    BinTime=BinTimeCENTER;
     
    clear Low_Study_DataToDecode High_Study_DataToDecode  Low_Probe_DataToDecode Low_Recall_DataToDecode High_Probe_DataToDecode High_Recall_DataToDecode Probe_DataToDecode Recall_DataToDecode
   
    
    clear StudyPowerlogAllSessionNormtime_b  ProbePowerlogAllSessionNormtime_b  RecallPowerlogAllSessionNormtime_b
    %freq binning
    freqBandYticks=[ 4 8 16 32 70 150];
    for itick=1:length(freqBandYticks)-1
        StudyPowerlogAllSessionNormtime_b(:,:,itick,:) = mean(StudyPowerlogAllSessionNormtime(:,:,waveletFreqs3>=freqBandYticks(itick) & waveletFreqs3<=freqBandYticks(itick+1),:),3);
        ProbePowerlogAllSessionNormtime_b(:,:,itick,:) = mean(ProbePowerlogAllSessionNormtime(:,:,waveletFreqs3>=freqBandYticks(itick) & waveletFreqs3<=freqBandYticks(itick+1),:),3);
        RecallPowerlogAllSessionNormtime_b(:,:,itick,:) = mean(RecallPowerlogAllSessionNormtime(:,:,waveletFreqs3>=freqBandYticks(itick) & waveletFreqs3<=freqBandYticks(itick+1),:),3);
    end
    
    clear Study_DataToDecode  Probe_DataToDecode  Recall_DataToDecode
    for itrl=1:size(ProbePowerlogAllSessionNormtime,2)
        for itime=1:size(ProbePowerlogAllSessionNormtime,4)
            Study_DataToDecode(itrl,:,itime)=reshape(StudyPowerlogAllSessionNormtime_b(:,itrl,:,itime),size(allcleanChans,2)*size(StudyPowerlogAllSessionNormtime_b,3),1);           
            Probe_DataToDecode(itrl,:,itime)=reshape(ProbePowerlogAllSessionNormtime_b(:,itrl,:,itime),size(allcleanChans,2)*size(ProbePowerlogAllSessionNormtime_b,3),1);
            Recall_DataToDecode(itrl,:,itime)=reshape(RecallPowerlogAllSessionNormtime_b(:,itrl,:,itime),size(allcleanChans,2)*size(RecallPowerlogAllSessionNormtime_b,3),1);
        end
    end
    
    
    % all low frequency 
    for itrl=1:size(ProbePowerlogAllSessionNormtime,2)
        for itime=1:size(ProbePowerlogAllSessionNormtime,4)
            Low_Study_DataToDecode(itrl,:,itime)=reshape(StudyPowerlogAllSessionNormtime(:,itrl,waveletFreqs3<16.5,itime),size(allcleanChans,2)*sum(waveletFreqs3<16.5),1);           
            Low_Probe_DataToDecode(itrl,:,itime)=reshape(ProbePowerlogAllSessionNormtime(:,itrl,waveletFreqs3<16.5,itime),size(allcleanChans,2)*sum(waveletFreqs3<16.5),1);
            Low_Recall_DataToDecode(itrl,:,itime)=reshape(RecallPowerlogAllSessionNormtime(:,itrl,waveletFreqs3<16.5,itime),size(allcleanChans,2)*sum(waveletFreqs3<16.5),1);
            
            High_Study_DataToDecode(itrl,:,itime)=reshape(StudyPowerlogAllSessionNormtime(:,itrl,waveletFreqs3>32,itime),size(allcleanChans,2)*sum(waveletFreqs3>32),1);
            High_Probe_DataToDecode(itrl,:,itime)=reshape(ProbePowerlogAllSessionNormtime(:,itrl,waveletFreqs3>32,itime),size(allcleanChans,2)*sum(waveletFreqs3>32),1);
            High_Recall_DataToDecode(itrl,:,itime)=reshape(RecallPowerlogAllSessionNormtime(:,itrl,waveletFreqs3>32,itime),size(allcleanChans,2)*sum(waveletFreqs3>32),1);

         end
    end
    
   SubjResults.Low_Study_DataToDecode=Low_Study_DataToDecode;  
   SubjResults.Low_Probe_DataToDecode=Low_Probe_DataToDecode;
   SubjResults.Low_Recall_DataToDecode=Low_Recall_DataToDecode;
   
   SubjResults.High_Study_DataToDecode=High_Study_DataToDecode;
   SubjResults.High_Probe_DataToDecode=High_Probe_DataToDecode;
   SubjResults.High_Recall_DataToDecode=High_Recall_DataToDecode;   
   
   SubjResults.Study_DataToDecode=Study_DataToDecode;
   SubjResults.Probe_DataToDecode=Probe_DataToDecode;
   SubjResults.Recall_DataToDecode=Recall_DataToDecode;    
   
   SubjResults.BinTime=BinTimeCENTER;
   SubjResults.ProbeCleanEEG=ProbeCleanEEG;
   SubjResults.RecallCleanEEG=RecallCleanEEG;
   

   % get accuracy mask and memorability mask based on the clean trials and clearn electrodes;
   AccuracyMask=[SubjTable(isub).PALTable.correct{1:end}]>0;
   HighMemMask = WordtoAnalyzeTReduced.ResponseMemorability{isubtem} > medianMemor; %  >= MemPercent(3); %
   LowMemMask = WordtoAnalyzeTReduced.ResponseMemorability{isubtem} < medianMemor; %  = MemPercent(2);  %
   
   MemorabilityScore =  WordtoAnalyzeTReduced.ResponseMemorability_z{isubtem};
   MemorabilityScore = MemorabilityScore(SubjResults.allcleanTrials>0);
   
   HighMemMask=HighMemMask(allcleanTrials>0);
   LowMemMask=LowMemMask(allcleanTrials>0);
   AccuracyMask=AccuracyMask(allcleanTrials>0);
   
   SubjResults.AccuracyMask=AccuracyMask;
   SubjResults.HighMemMask=HighMemMask;
   SubjResults.LowMemMask=LowMemMask;
   SubjResults.MemorabilityScore=MemorabilityScore;
   SubjResults.cleanRTs=SubjTable(isub).RTtemp(allcleanTrials>0);
    
   savefilename=fullfile(outpath,['SubjResults_ATL' num2str(isub) '.mat']);
   save(savefilename,'SubjResults','-v7.3');
        
end 

end



%% decode using SubjResults

allsub=[26:64 66];
rootEEGdir = '/Volumes/Zane/NIH_FRNU_ROOT';                      %office-local

load('SubjTable_palRAMword.mat')
load('PAL_Memo_PALRAM.mat')

ToAnalyzeSub=allsub;
% PAL_Memo.Combinedmemorability = zscore(PAL_Memo.Probememorability) + (PAL_Memo.Responsememorability - nanmean(PAL_Memo.Responsememorability))./nanstd(PAL_Memo.Responsememorability);
% PAL_Memo.Combinedmemorability = PAL_Memo.Combinedmemorability/2;

medianMemor = median(PAL_Memo.Responsememorability);

datapath=outpath;

load('WordtoAnalyzeTReduced.mat')

fprintf('loading SubjResults_ATL...\n')

ATLIDs=WordtoAnalyzeTReduced.subID;
accutrials=[WordtoAnalyzeTReduced.WordCount{1:end}].*[WordtoAnalyzeTReduced.meanACC{1:end}];
inacctrial=[WordtoAnalyzeTReduced.WordCount{1:end}].*(1-[WordtoAnalyzeTReduced.meanACC{1:end}]);
ATLIDs=ATLIDs(accutrials >= 30 & inacctrial>=30 );

%% Calculate reinstatement group effects, to isolate the encoding time to average. 

for isubtem = 1:length(ATLIDs)
    
    isub=ATLIDs(isubtem);
    
    isub
    savefilename=fullfile(datapath,['SubjResults_ATL' num2str(isub) '.mat']);
    if exist(savefilename)>0
        
        clear SubjResults
        
        load(savefilename);
        
        
        %% Get the condition codes. 
        % ACC
        cleanmask=SubjResults.allcleanTrials;
        AccuracyMask=[SubjTable(isub).PALTable.correct{1:end}]>0;
        AccuracyMask=AccuracyMask(cleanmask>0);
        
        % Memorability 
        
        for iw=1:length(SubjTable(isub).PALTable.probe)
            ProbememPreict(iw) =  PAL_Memo.Responsememorability(ismember(PAL_Memo.uniquewordsID_10,SubjTable(isub).PALTable.probe(iw)));
            ExpectmemPreict(iw) =  PAL_Memo.Responsememorability(ismember(PAL_Memo.uniquewordsID_10,SubjTable(isub).PALTable.expected(iw)));
            Item1mem(iw) =  PAL_Memo.Responsememorability(ismember(PAL_Memo.uniquewordsID_10,SubjTable(isub).PALTable.item1(iw)));
            Item2mem(iw) =  PAL_Memo.Responsememorability(ismember(PAL_Memo.uniquewordsID_10,SubjTable(isub).PALTable.item2(iw)));
        end
        AverageStudyMem = (ProbememPreict+ExpectmemPreict)/2;
        medianMemor=median(PAL_Memo.Responsememorability);
        
        ExpectmemPreict=ExpectmemPreict(cleanmask>0);
        
        %Change the dimensions to be feature X time X event
        encMat = SubjResults.Study_DataToDecode;
        recMat = SubjResults.Recall_DataToDecode;
        numEvents=size(encMat,1)
        clear output;
        for event = 1:numEvents
            encData = squeeze(encMat(event,:,:));
            recData = squeeze(recMat(event,:,:));
            s = (encData')*recData;
            normEnc = sqrt(sum(encData.^2));
            normRec = sqrt(sum(recData.^2));
            norms = (normEnc')*normRec;
            output(event,:,:) = s./norms;
        end
        STUDY_Probe_Similarity=output;
        BinTime=SubjResults.BinTime;
        
        %Obtain across subject average
        AccurateTrialsSim(isubtem,:,:)=squeeze(mean(STUDY_Probe_Similarity(AccuracyMask==1,:,:)));
        Gl_Accurate_highmem_TrialsSim(isubtem,:,:)=squeeze(mean(STUDY_Probe_Similarity(AccuracyMask==1 & ExpectmemPreict>medianMemor,:,:)));
        Gl_Accurate_lowmem_TrialsSim(isubtem,:,:)=squeeze(mean(STUDY_Probe_Similarity(AccuracyMask==1 & ExpectmemPreict<=medianMemor,:,:)));
        InAccurateTrialsSim(isubtem,:,:)=squeeze(mean(STUDY_Probe_Similarity(AccuracyMask==0,:,:)));
        
        MedianRT(isubtem)=prctile(SubjResults.cleanRTs(AccuracyMask==1),50);
        MeanRT(isubtem)=mean(SubjResults.cleanRTs(AccuracyMask==1));
        
        ReducedTime_Acc_Trial_Sim=AccurateTrialsSim(:,BinTime>=-1000 & BinTime<=4000,BinTime>=-4000 & BinTime<=1000 );
        ReducedTime_InAcc_Trial_Sim=InAccurateTrialsSim(:,BinTime>=-1000 & BinTime<=4000,BinTime>=-4000 & BinTime<=1000 );
        
        ReducedTimeX=BinTime(BinTime>=-4000 & BinTime<=1000);
        ReducedTimeY=BinTime(BinTime>=-1000 & BinTime<=4000);
        
        % calculate the cluster-based significant time window.
        
        
    end
end

cluster_based_correction

% Two critical variable come out from this analysis
%[min(signYtime) max(signYtime)]

%%

for isubtem = 1:length(ATLIDs)
    
    isub=ATLIDs(isubtem);
    
     isub
     savefilename=fullfile(datapath,['SubjResults_ATL' num2str(isub) '.mat']);

    if exist(savefilename)>0
        
        clear SubjResults
        load(savefilename);
        
        % extract all condition code
        Curlist=[SubjTable(isub).PALTable.list{1:end}];
        sessions=[[SubjTable(isub).alignedEvents.RecallEvent.session]];

        for iw=1:length(SubjTable(isub).PALTable.probe)
            ProbememPreict(iw) =  PAL_Memo.Responsememorability(ismember(PAL_Memo.uniquewordsID_10,SubjTable(isub).PALTable.probe(iw)));
            ExpectmemPreict(iw) =  PAL_Memo.Responsememorability(ismember(PAL_Memo.uniquewordsID_10,SubjTable(isub).PALTable.expected(iw)));
            Item1mem(iw) =  PAL_Memo.Responsememorability(ismember(PAL_Memo.uniquewordsID_10,SubjTable(isub).PALTable.item1(iw)));
            Item2mem(iw) =  PAL_Memo.Responsememorability(ismember(PAL_Memo.uniquewordsID_10,SubjTable(isub).PALTable.item2(iw)));
        end
        AverageStudyMem = (ProbememPreict+ExpectmemPreict)/2;
        
        %list based analysis
        uniquelist = unique(Curlist);
        uniquesession=unique(sessions);
        Curlistupdate=[];
        for iss=1:length(unique(uniquesession))
            if iss==1
                Curlistupdate = [Curlistupdate Curlist(sessions==uniquesession(iss))];
            else            
                Curlistupdate = [Curlistupdate Curlist(sessions==uniquesession(iss))*100];
            end
        end
        uniquelist=unique(Curlistupdate);
        
        AccuracyMask=[SubjTable(isub).PALTable.correct{1:end}]>0;
        RTs=[SubjTable(isub).PALTable.RT{1:end}];
        RTs(RTs<0)=nan;

        clear listmemscore  ListMem  listmemscore  MemlistACC RTnanmeans  MemlistACC
        for ils=1:length(uniquelist)
            ListMem(Curlistupdate==uniquelist(ils)) = mean(AverageStudyMem(Curlistupdate==uniquelist(ils)));
            RTnanmeans(ils)=nanmean(log(RTs(Curlistupdate==uniquelist(ils))));
            listmemscore(ils)=nanmean(AverageStudyMem(Curlistupdate==uniquelist(ils)));
            MemlistACC(ils)=nanmean(AccuracyMask(Curlistupdate==uniquelist(ils)));
        end
        nonnanin=~isnan(RTnanmeans);
        nanmeanRTall(isub)=nanmean(RTs);
        correlationRTmemList(isub) = corr((RTnanmeans(nonnanin))',listmemscore(nonnanin)','type','pearson');
        correlationACCmemList(isub) = corr(MemlistACC(nonnanin)',listmemscore(nonnanin)','type','pearson');

        % 
        cleanmask=SubjResults.allcleanTrials;
        AverageStudyMem = AverageStudyMem(cleanmask>0);
        ExpectmemPreict = ExpectmemPreict(cleanmask>0);
        ProbememPreict=ProbememPreict(cleanmask>0);
        ListMem=ListMem(cleanmask>0);

        AccuracyMask=AccuracyMask(cleanmask>0);
        TrialsPloted=[sum(AccuracyMask==1 & ExpectmemPreict<=medianMemor) sum(AccuracyMask==1 & ExpectmemPreict>medianMemor)];
        min([sum(AccuracyMask==1 & ExpectmemPreict<=medianMemor) sum(AccuracyMask==1 & ExpectmemPreict>medianMemor)])

%%

% subject level 
%Change the dimensions to be feature X time X event
encMat = SubjResults.Study_DataToDecode;
recMat = SubjResults.Recall_DataToDecode;
numEvents=size(encMat,1)
clear output STUDY_Probe_Similarity
for event = 1:numEvents
    encData = squeeze(encMat(event,:,:));
    recData = squeeze(recMat(event,:,:));
    s = (encData')*recData;
    normEnc = sqrt(sum(encData.^2));
    normRec = sqrt(sum(recData.^2));
    norms = (normEnc')*normRec;
    output(event,:,:) = s./norms;
end
STUDY_Probe_Similarity=output;
BinTime=SubjResults.BinTime;

% sanity check!
h=figure;
subplot(2,2,1);
xyimagesc(BinTime,BinTime,squeeze(mean(STUDY_Probe_Similarity(AccuracyMask==1 ,:,:)))); %
axis([-4000 1000 -1000 4000]);
axis square

subplot(2,2,2);
tmask=BinTime>=min(signYtime) & BinTime<=max(signYtime);
xyimagesc(BinTime,BinTime(tmask),squeeze(mean(STUDY_Probe_Similarity(AccuracyMask==1 ,tmask,:)))); %
axis([-4000 1000 -1000 4000]);
axis square

medRT=prctile(SubjResults.cleanRTs(AccuracyMask==1),50);
hold on;
plot([-medRT -medRT],[min(BinTime) max(BinTime)],'r-')
plot([-0 -0],[min(BinTime) max(BinTime)],'k-')


A = squeeze(mean(STUDY_Probe_Similarity(:,tmask,:),2))

% Normalized in time 
RoundBinTime=round(BinTime/25)*25;
% normalized by trial-by-trial reaction time. 
AllAccRT=SubjResults.cleanRTs;
clear AZpercent AZ
for itr=1:size(AllAccRT,2)
    if AllAccRT(itr)==-999
        currentRT=-4000;
    else
        currentRT=-AllAccRT(itr);
        currentRT=round(currentRT/25)*25;
    end
    y = A(itr,RoundBinTime>=currentRT & RoundBinTime<=-currentRT);
    x = linspace(-100, 100, length(y));    
    xi = [-100:1:100]; %linspace(-100, 100, 20);    
    AZpercent(itr,:)= interp1(x,y,xi);
end


% pertime=linspace(-100, 100, 20);
pertime=[-100:1:100]
subplot(2,2,3);
plot(pertime,mean(AZpercent(AccuracyMask==1 & ExpectmemPreict>medianMemor,:)));
hold on;
plot(pertime,mean(AZpercent(AccuracyMask==1 & ExpectmemPreict<=medianMemor,:)))
plot([0 0],[-0.2 0.2],'k-');axis([min(pertime) 100 -0.2 0.2])
plot([-minRT -minRT],[-0.2 0.2],'k.-');axis([min(pertime) 100 -0.2 0.2])
legend('HighMem','LowMem','recall onset','location','southeast')
title('Averaged Similarity')
xlabel('Percentage of Recall Time')

NeurMemTrace(isubte1,:)=mean(AZpercent(AccuracyMask==1 & ExpectmemPreict>medianMemor,:);
NeurMemTrace(1,:)=mean(AZpercent(AccuracyMask==1 & ExpectmemPreict>medianMemor,:);


ax=subplot(2,2,4)
x=mean(AZpercent(AccuracyMask==1,pertime<-25),2);
y=ExpectmemPreict(AccuracyMask==1)';
p = polyfit(x,y,1);
f = polyval(p,x);
plot(x,y,'bo',x,f,'b-')
EearlyNeuMem.Corr(isubtem) = corr(x,y,'type','spearman');
EearlyNeuMem.N(isubtem) = length(x);

hold on
x=mean(AZpercent(AccuracyMask==1,pertime>-75 & pertime<0),2);
y=ExpectmemPreict(AccuracyMask==1)';
p = polyfit(x,y,1);
f = polyval(p,x);
plot(x,y,'ro',x,f,'r-')
legend('early 50%','','late 50%','')
xlabel('Neural Reinstatement - AccTrial')
ylabel('Observed Memorability - AccTrail')
LateNeuMem.Corr(isubtem) = corr(x,y,'type','spearman');
LateNeuMem.N(isubtem) = length(x);

    h=gcf;
    set(h,'PaperOrientation','landscape','Position',[50 50 1200 800]);
    printfilename=fullfile(outpath,['Reinstate_Mem_Sub' num2str(isub) '.pdf']);
    print(h,printfilename,'-dpdf','-bestfit');
    
    end
    
end


% print(gcf,'scaled_decodingacc','-dpdf','-bestfit');
%% PLOT ALL Electrodes
close all

bp = brainplotter()
bd = braindata2()
bd.loadAverage()
bp =bd.ezplot(bp)
bp.view('ventral')

datapath='/Volumes/Zane/NIH_HPC/NIH_PAL_Mem/Scripts/3_Mono/data/ATL_05_19';

for isub = allsub
    isub
     savefilename=fullfile(datapath,['SubjResults_ATL' num2str(isub) '.mat']);
    
    
    if exist(savefilename)>0
        
        load(savefilename);

        % identify and limit the electrodes for analysis, only look at the surface ALT electrodes.
        subj     = ['NIH0' num2str(isub)];
        
        % load subject braindata
        bd = braindata2(subj,rootEEGdir)
        
        % load each electrodes mesh info on the standardized brain
        t  = bd.roi.lead_mesh;
        
        clear elecs
        % get example electrodes
        elecs=SubjResults.allcleanChans;
        
        
        % Electrodes to exclude for misalignment
        % NIH026 G27
        % NIH029 G17
        % NIH032 ROF3
        % NIH036 OF3, OF4
        % NIH062 OF4
        % NIH066 TG84, TG123
        
        %         if strcmp(subj,'NIH026')
        %             elecs=elecs(~ismember(elecs,{'G27'}));
        %         elseif strcmp(subj,'NIH029')
        %             elecs=elecs(~ismember(elecs,{'G17'}));
        %         elseif strcmp(subj,'NIH032')
        %             elecs=elecs(~ismember(elecs,{'ROF3'}));
        %         elseif strcmp(subj,'NIH036')
        %             elecs=elecs(~ismember(elecs,{'OF3','OF4'}));
        %         elseif strcmp(subj,'NIH062')
        %             elecs=elecs(~ismember(elecs,{'OF4'}));
        %         elseif strcmp(subj,'NIH066')
        %             elecs=elecs(~ismember(elecs,{'TG84', 'TG123'}));
        %         end
        
        
        for j = 1:length(elecs)
            % get channels index within lead mesh table
            chan = strcmp(t.chanName,elecs{j});
            
            % get surface to plot on (left or right hemisphere)
            s = ['pial_' t.whichHemi{chan}];
            bp.plotPoint(t(chan,:),...
                'radius',1,...
                'mesh_clust_d',0,...
                'alpha',0.5,...
                'color',[1 0 0 ],...
                'surf',s) %'label', elecs{j}
            
            %   mesh_clust_d - If you are passing mesh index lists, by default a point is placed at the first mesh index in the list. However, for sulcus-
            %             spanning electrodes, we may want to plot 2+ points at each group of mesh indices. Pass a distance here if you want to clusterize
            %             such that mesh_indices >=~ mesh_clust_d apart will be plotted as separate points. Default is 3. 0 to just use the first index.
            % ,...
            
            
        end
        
        %keyboard
    end
    
end



% Electrodes to exclude for misalignment
% NIH026 G27
% NIH029 G17
% NIH032 ROF3
% NIH036 OF3, OF4
% NIH062 OF4
% NIH066 TG84, TG123


